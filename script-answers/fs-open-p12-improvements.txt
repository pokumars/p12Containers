fs-open-p12-improvements
Full stack open part 12 comments
-- Create a file index.js to your current directory and write console.log('Hello, World') inside it. No need for containers yet.

because the names of docker containers are randomly generated, write it down somewhere which container name of the course corresponds to which container name on your machine. This will make things less confusing as the course moves along so that you can follw the course material.

-------------------------COMMENT---------------------------
marker: part C Communications between containers in a more ambitious environment
reason: unclear communication
solution/conclusion

`Let us now put the hello-frontend behind the reverse proxy.

Create a file nginx.conf in the project root and take the following template as a starting point.`
I assume by project root, it means in 'todo-app' i.e the parent of todo-backend and todo-frontend. This could be communicated more clearly because both frontend and backedn are so called projects that we have been workinng on separately so project root could also mean the frontend because it has just been mentioned.

I found out later that what was meant wasnt even what I thought by reading further to search for clues where was meant.  He meant the hello-front. I shouldnt have to go clue-hunting for this. I think since this part 12 has so many sub projects, it makes sense to be a bit clearer.

-------------------------COMMENT---------------------------
marker: part C Communications between containers in a more ambitious environment
reason: unclear communication
solution/conclusion

`Next, create an Nginx service in the docker-compose.yml file. Add a volume as instructed in the Docker Hub page where the right side is :/etc/nginx/nginx.conf:ro, the final ro declares that the volume will be read-only:`

I assume by project root, it means in 'todo-app' i.e the parent of todo-backend and todo-frontend. This could be communicated more clearly because both frontend and backedn are so called projects that we have been workinng on separately so project root could also mean the frontend because it has just been mentioned.

I found out later that what was meant wasnt even what I thought by reading further to search for clues where was meant.  He meant the hello-front. I shouldnt have to go clue-hunting for this. I think since this part 12 has so many sub projects, it makes sense to be a bit clearer.

-------------------------COMMENT---------------------------
marker: Exercise 12.8 when you have to run mongosh and it says mongosh not found
reason:  
solution/conclusion:
winpty docker exec -it container_name bash
I am on bash for windows hence the need to use winpty.

I tried `winpty docker exec -it container_name mongosh` and that didnt work either.
Whilst googling it said I had to download the mongo shell but that didnt really make sense because the image is an official mongodb image so why would it not come with the mongo shell.
A solution is to change directory into docker-entrypoint-initdb.d/ where there is mongo-init.js the mongo initialising files.
from there run `mongosh -u your_username -p your_password` and the mongo cli should be available.


-------------------------COMMENT---------------------------
marker: docker build -t fs-hello-world . 
reason: 
solution/conclusion:
at this part for windows/WSL users, there hsould be some instruction that says 
- enter WSL
- navigate to the windows directory where you are having your submission files
  i.e cd /mnt/c/Users/username/.../part12-containers-applications/partBDir/ 
  which contains your index.js and your Dockerfile
- 

-------------------------COMMENT---------------------------
marker: 12 part 1  Next, let's skip installing Node altogether. 
reason: again where are we ?
solution/conclusion

-------------------------COMMENT---------------------------
marker: 12 part 1 Create a file index.js to your current directory and write console.log('Hello, World') inside it. No need for containers yet.
reason: What does this mean "to your current directory". Where are we? on the windows side or the WSL side? is the current directory supposed to be the same as the submission folder or are we talking about something else?
solution/conclusion

It later becomes clear that this was index.js on the windows side

-------------------------COMMENT---------------------------
marker:
reason: 
solution/conclusion

because the names of docker containers are randomly generated, write it down soemwhee which container name of the course corresponds to which container name on your machine. This will make things less confusing as the course moves along so that you can follw the course material.


-------------------------COMMENT---------------------------
marker: instructions after 12.14
reason: we are putting hello front in the dev.Dockerfile but the instructions make it seem that that we are putting the todo frontend in the dev.dockerfile.
How do I know it meant the hello-front instead of the todo frontend? well 
- it names the image as hello-front-dev
- The env variable required in the frontend of the todo is not in the dockerfile  
solution/conclusion

-------------------------COMMENT---------------------------
marker:
reason: 
solution/conclusion

-------------------------COMMENT---------------------------
marker:
reason: 
solution/conclusion

-------------------------COMMENT---------------------------
marker:
reason: 
solution/conclusion


-----
a personal note -
Docker mounted volume adds ;C to end of windows path when translating from linux style path. 
so replace the pwd with /${PWD} or /$(pwd)
https://stackoverflow.com/questions/50608301/docker-mounted-volume-adds-c-to-end-of-windows-path-when-translating-from-linux

------

# docker build -f ./dev.Dockerfile -t hello-front-dev .

#on windows using git bash, this is the command to develop react with hot reloading.
#docker run --name hello-front-dev-cont -p 3000:3000 --rm -v /${PWD}:/usr/src/app/ -e WATCHPACK_POLLING=true hello-front-dev
---------

for exercise 12.16 you may have to modify your npm run watch to include --legacy watch. Otherwise nodemon doesnt hot reload in the container when you make changes on the express files in the volume.
if you `docker exec -it` into the container and `cat filename` you can see that the change is refelected but it just doenst hot reload




Notes how to debug with Busybox
Busybox can help us to debug our configurations. So if you get lost, you should use Busybox to find out what works and what doesn't. Let's use it to explore what was just said. That containers are inside a network and you can easily connect between them. Busybox can be added to the mix by changing docker-compose.yml to:

services:
  app:
    image: hello-front-dev
    build:
      context: .
      dockerfile: dev.Dockerfile
    volumes:
      - ./:/usr/src/app
    ports:
      - 3000:3000
    container_name: hello-front-dev
  debug-helper:
    image: busybox


Busybox wont have any process running in it so we cannot exec in there.
While the docker-compose containers are running, we can do a request with wget since it's a tool included in Busybox to send a request from the debug-helper to the container to be debugged.
With Docker Compose we can use docker compose run SERVICE COMMAND to run a service with a specific command. Command wget requires the flag -O with - to output the response to the stdout:


-------

https://stackoverflow.com/questions/53945934/docker-compose-and-dockerignore
I struggled with this until I came across this article which helped me understand what was happening in my case. If you are binding everything to the container
e.g .:/app or .:/usr/src/app as it is common during development for hot reloading, we are completely ignoring .dockerignore since the bind mounts are attached
after the image is built, even files that were ignored are now mounted to the container. I removed the binding and files specified in .dockerignore were ignored.

I still bind everything during development but when building production images, I do not

so the problem with bcrypt not working in my docker-compose.dev.yml based containers is that I copy node_modules from my windows to a linux container.
I put node_modules in my .dockerignore but then because it is a dev environment I also want hot-reloading and create a volume. what that does is that the very files i dockerignored are mnow copied into the container. The bcrypt version the container gets is I suupose OS-specific and that one was for windows. So I need to rebuild it for that invironemnt it is in now.

one solution would be to have the rebuild command in the dockerfile `npm rebuild bcrypt --build-from-source`.
Another one is to not have everything in the volume somehow