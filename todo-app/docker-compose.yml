# This is the version of stuff that uses the reverse proxy method
services: 
  todo-frontend-app:
    image: todo-frontend-prod
    build: 
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
    container_name: todo-frontend-prod # This will name the container todo-front-prod-cont
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: todo-rvrs-prxy-prod
    depends_on:
      - todo-frontend-app # wait for the frontend container to be started
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
  redis:
    image: redis
    ports:
      - 3457:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data
  server:
    image: todo-backend-prod
    build:
      context: ./todo-backend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
    container_name: todo-backend-prod #This will name the container todo-backend-prod
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
  debug-helper:
    image: busybox
#in the environment variales, the port used is the port from which the application is available in that container, also specified in the docker-compose.yml. It uses the name of the service specified in the docker-compose.yml.


# winpty docker exec -it todo-app-backend-dev-cont sh
# docker compose -f docker-compose.dev.yml down --volumes
# docker compose -f docker-compose.dev.yml up #to initialize

# docker compose -f docker-compose.dev.yml up #to initialize

# --volumes -> Remove named volumes declared in the "volumes" section of the Compose file and anonymous volumes attached to containers.

# QnA Services.mongo doesnt have a cmd so why does the mongo service run? Docker images often have a default command defined in their Dockerfile. 


# in a docker compose, when a group of docker containers are started, there is an internal docker network. You don't need to use localost to access the containers in the docker network. you can just refer to them by their service nae as we have done here.
